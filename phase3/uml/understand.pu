@startuml

hide circle
hide empty members
hide method

!definelong req(name,txt,label)
class "name" as label <<requirement>> {
Text=txt
}
!enddefinelong

!definelong freq(name,txt,label)
class "name" as label <<functionalRequirement>> {
Text=txt
}
!enddefinelong

!definelong dcnstr(name,txt,label)
class "name" as label <<designConstraint>> {
Text=txt
}
!enddefinelong

!definelong testcase(name,txt,label)
class "name" as label <<testCase>> {
Text=txt
}

!enddefinelong
!define nest(x,y) x +-- y
!define derive(x,y) x <.. y : <<deriveReqt>>
!define refine(x,y) x <.. y : <<refine>>
!define derivel(x,y) x <.. y : <<deriveReqt>> link

!define REQ3 自主的な取り組みを促す
!define REQ3_1 楽しんで取り組めるようにする
!define REQ3_2 継続してとりくめるようにする
!define REQ3_4 使用履歴を確認できるようにする
!define REQ3_5 カレンダーで確認ができる
!define REQ3_6 他の人のフォームと比べることができる
!define REQ3_7 プロのフォームと比べることができる
!define REQ3_8 自分の昔のフォームと比べることができる


title こどものぼーる

package "req 自主的な取り組みを促す" <<Frame>> {
    req(REQ3,,A3)
    req(REQ3_1,,A3_1)
    req(REQ3_2,,A3_2)
    freq(REQ3_4,,A3_4)
    freq(REQ3_5,,A3_5)
    freq(REQ3_6,,A3_6)
    freq(REQ3_7,,A3_7)
    freq(REQ3_8,,A3_8)
}
derive(A3,A3_1)
derive(A3,A3_2)

derive(A3_1,A3_6)
derive(A3_6,A3_7)
derive(A3_6,A3_8)

derive(A3_2,A3_4)
derive(A3_4,A3_5)

@enduml